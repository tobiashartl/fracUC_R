v      <- TCcomp$v
plot(v)
Zt_gamma
# Simulation:
# Performance of fUC for parameter estimation
#   - High and normal signal to noise ratios
#   - AR plus non-AR
#   - compare d with other nonparametric estimators
gc()
rm(list = ls())
library(fUCpack)
library(dplyr)
library(parallel)
library(KFAS)
devtools::load_all()
# Settings
n <- 100
d <- 1.5
r <- 1
# Strong persistence
ar <- c(-1.6, 0.8)
set.seed(42)
# Check 1: non-correlated UC vs. correlated UC
Q <- diag(2)
Q[2,2] <- 6
Q[2,1] <- Q[1,2] <- 1
U <- sapply(1:1, function(x) mvtnorm::rmvnorm(n, mean=c(0, 0), sigma = Q))
x <- frac_diff_multi(U[1:n,], d=-d)
u <- U[-(1:n),]
c <- stats::filter(c(rep(0, length(ar)), u), filter = c(-ar), method = "recursive", sides = 1)[-(1:length(ar))]
y <- x + c + 1:n
plot(y, type="l")
lines(x, col="2")
theta <- c(d, mlogvech(Q), ar)
# correlated filter
x.hat1 <- fUC_comp(y, d, 1, ar, corr=FALSE)
x.hat2 <- fUC_comp(y, d, Q, ar, corr=TRUE)
fUC_opt(c(d, mlogvech(Q), ar), y, deterministics = TRUE, corr=TRUE, START=1)
S0tP <- embed0(ma_inf(d[1], n-1) , n)
(t(S0tP) + t(S0cP))[-n, -n] %*% x.hat2$x[-1]
cbind(x.hat1$x, x.hat2$x, x.hat1$c, x.hat2$c) #  OK
devtools::load_all()
gc()
n <- 100
d <- 1.25
nu <- 3
R <- 1
# Strong persistence
ar <- c(-1.6, 0.8)
# ==============================================================================
# Check: TC_inv:
if(length(ar) < n-1){
b <- c(ar, rep(0, n-length(ar)-1))
}else{
b <- ar
}
# simulate data
x <- frac_diff(rnorm(n), -d)
c <- stats::filter(c(rep(0, length(ar)), rnorm(n)), filter = c(-ar), method = "recursive", sides = 1)[-(1:length(ar))]
y <- x + c
# Generate coefficient matrices
S0t      <- embed0(ma_inf(d[1], n-1) , n)
S0c      <- embed0(c(1, b), n)
# Obtain coefficients for x, c
ma       <- ma_inf(d[1],NROW(y))[-1]
ma_c     <- c(ar, rep(0, n-length(ar)))
Q <- matrix(c(1, 0, 0, nu), 2, 2)
theta <- c(d, mlogvech(Q), ar)
corr=TRUE
d <- theta[1]
n <- length(y)
Q  <- pd_cov(theta[2:4], Q.trans,flip,neg)
Q.trans="mlv"
Q  <- pd_cov(theta[2:4], Q.trans,flip,neg)
#Q <- trans2mat(theta[2:4])
Ht <- matrix(0, 1, 1)
nu <- c(Q[1,1], Q[2,2], Q[1,2])
if(length(theta)>4){
ar <- theta[-(1:4)]
}else{
ar <- NULL
}
ar
v <- fUC_comp(y, d, Q, ar, corr=TRUE)$v
v
# iterations for P of the Kalman filter:
Tt <- rbind(-frac_diff(c(1, rep(0, length(y)-1)), d)[-1],
cbind(diag(length(y)-2), 0))
if(!is.null(ar)){
if(length(ar)>1){
Tt_c <- rbind(-ar, cbind(diag(length(ar)-1), 0))
}else{
Tt_c <- matrix(-ar, 1, 1)
}
Tt <- bdiag(Tt, Tt_c)
}else{
Tt <- bdiag(Tt, 1)
}
Zt <- matrix(c(1, rep(0, length(y)-2)), ncol = length(y)-1)
if(!is.null(ar)){
Zt <- cbind(Zt, matrix(c(1, rep(0, length(ar)-1)), nrow = 1))
}else{
Zt <- cbind(Zt, 1)
}
Rt <- matrix(c(1, rep(0, NROW(Tt)-1)), ncol = 1)
if(!is.null(ar)){
Rt <- cbind(Rt, c(rep(0, length(y)-1), 1, rep(0, length(ar)-1)))
}else{
Rt <- cbind(Rt, c(rep(0, length(y)), 1))
}
P_v <- matrix(NA, length(y), 1)
# initialization:
if(diffuse){
A <- toComp(-theta[-(1:4)])$CompMat
p <- length(theta)-4
sigma_sq <- Q[2,2]
P1A <- matrix(solve(diag(p^2)-(A%x%A))%*%c(sigma_sq,rep(0,p^2-1)),p,p)
P1Inf <- bdiag(diag(n-1)*0, P1A)
Pt    <- P1Inf
}else{
Pt <- matrix(0, NCOL(Tt), NCOL(Tt))
#     Pt[1,1] <- Q[1,1]
#     Pt[length(y), length(y)] <- Q[2,2]
}
diffuse=TRUE
# initialization:
if(diffuse){
A <- toComp(-theta[-(1:4)])$CompMat
p <- length(theta)-4
sigma_sq <- Q[2,2]
P1A <- matrix(solve(diag(p^2)-(A%x%A))%*%c(sigma_sq,rep(0,p^2-1)),p,p)
P1Inf <- bdiag(diag(n-1)*0, P1A)
Pt    <- P1Inf
}else{
Pt <- matrix(0, NCOL(Tt), NCOL(Tt))
#     Pt[1,1] <- Q[1,1]
#     Pt[length(y), length(y)] <- Q[2,2]
}
Pt
for(t in 1:n){
P_tl <- tcrossprod(tcrossprod(Tt, Pt), Tt) + tcrossprod(tcrossprod(Rt, Q), Rt)
F_t  <- tcrossprod(tcrossprod(Zt, P_tl), Zt)
Pt   <- P_tl - tcrossprod(P_tl, Zt) %*% tcrossprod(Zt, P_tl) / c(F_t)
P_v[t,] <- F_t
if(approx & t>1){
if(abs(P_v[t,1]/P_v[t-1,1]-1 )<0.001){
P_v[((t+1):n), 1] <- P_v[t, 1]
break
}
}
}
P_v
for(t in 1:n){
P_tl <- tcrossprod(tcrossprod(Tt, Pt), Tt) + tcrossprod(tcrossprod(Rt, Q), Rt)
F_t  <- tcrossprod(tcrossprod(Zt, P_tl), Zt)
Pt   <- P_tl - tcrossprod(P_tl, Zt) %*% tcrossprod(Zt, P_tl) / c(F_t)
P_v[t,] <- F_t
if(approx & t>1){
if(abs(P_v[t,1]/P_v[t-1,1]-1 )<0.001){
P_v[((t+1):n), 1] <- P_v[t, 1]
break
}
}
}
approx=TRUE
for(t in 1:n){
P_tl <- tcrossprod(tcrossprod(Tt, Pt), Tt) + tcrossprod(tcrossprod(Rt, Q), Rt)
F_t  <- tcrossprod(tcrossprod(Zt, P_tl), Zt)
Pt   <- P_tl - tcrossprod(P_tl, Zt) %*% tcrossprod(Zt, P_tl) / c(F_t)
P_v[t,] <- F_t
if(approx & t>1){
if(abs(P_v[t,1]/P_v[t-1,1]-1 )<0.001){
P_v[((t+1):n), 1] <- P_v[t, 1]
break
}
}
}
P_v
if(is.logical(deterministics)){
if(deterministics){
det.type <- "frac"
}else{
det.type <- "none"
}
}else{
det.type <- deterministics
deterministics = TRUE
}
deterministics="frac"
if(deterministics){
if(det.type == "frac"){
Z <- cbind(1, frac_diff(rep(1, length(y)), -d))
if(!corr){
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, nu, ar)$v)
}else{
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, Q, ar, corr)$v)
}
regmod <- lm(v[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))]) ~ -1+
I(v2[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))])))
mu <- summary(regmod)$coefficients[,1]
v  <- c(rep(NA, START-1), residuals(regmod))
}else{
if(det.type == "const"){
Z <- matrix(1, n, 1)
}
if(det.type == "trend"){
Z <- cbind(1, 1:n)
}
if(!corr){
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, nu, ar)$v)
}else{
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, Q, ar, corr)$v)
}
regmod <- lm(v[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))]) ~ -1+
I(v2[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))])))
mu <- summary(regmod)$coefficients[,1]
v  <- c(rep(NA, START-1), residuals(regmod))
}
}
if(is.logical(deterministics)){
if(deterministics){
det.type <- "frac"
}else{
det.type <- "none"
}
}else{
det.type <- deterministics
deterministics = TRUE
}
det.type
deterministics
if(deterministics){
if(det.type == "frac"){
Z <- cbind(1, frac_diff(rep(1, length(y)), -d))
if(!corr){
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, nu, ar)$v)
}else{
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, Q, ar, corr)$v)
}
regmod <- lm(v[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))]) ~ -1+
I(v2[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))])))
mu <- summary(regmod)$coefficients[,1]
v  <- c(rep(NA, START-1), residuals(regmod))
}else{
if(det.type == "const"){
Z <- matrix(1, n, 1)
}
if(det.type == "trend"){
Z <- cbind(1, 1:n)
}
if(!corr){
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, nu, ar)$v)
}else{
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, Q, ar, corr)$v)
}
regmod <- lm(v[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))]) ~ -1+
I(v2[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))])))
mu <- summary(regmod)$coefficients[,1]
v  <- c(rep(NA, START-1), residuals(regmod))
}
}
START=2
if(deterministics){
if(det.type == "frac"){
Z <- cbind(1, frac_diff(rep(1, length(y)), -d))
if(!corr){
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, nu, ar)$v)
}else{
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, Q, ar, corr)$v)
}
regmod <- lm(v[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))]) ~ -1+
I(v2[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))])))
mu <- summary(regmod)$coefficients[,1]
v  <- c(rep(NA, START-1), residuals(regmod))
}else{
if(det.type == "const"){
Z <- matrix(1, n, 1)
}
if(det.type == "trend"){
Z <- cbind(1, 1:n)
}
if(!corr){
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, nu, ar)$v)
}else{
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, Q, ar, corr)$v)
}
regmod <- lm(v[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))]) ~ -1+
I(v2[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))])))
mu <- summary(regmod)$coefficients[,1]
v  <- c(rep(NA, START-1), residuals(regmod))
}
}
Z <- cbind(1, frac_diff(rep(1, length(y)), -d))
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, Q, ar, corr)$v)
P_v
P_v[-(1:(START-1))]
v[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))])
I(v2[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))]))
v2[-(1:(START-1))]
v2
v2[-(1:(START-1)), ]
I(v2[-(1:(START-1)), ]/sqrt(P_v[-(1:(START-1))]))
lm(v[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))]) ~ -1+
I(v2[-(1:(START-1)), ]/sqrt(P_v[-(1:(START-1))])))
regmod <- lm(v[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))]) ~ -1+
I(v2[-(1:(START-1)), ]/sqrt(P_v[-(1:(START-1))])))
mu <- summary(regmod)$coefficients[,1]
mu
v  <- c(rep(NA, START-1), residuals(regmod))
v
Z <- cbind(frac_diff(rep(1, length(y)), -d))
Z
regmod <- lm(v[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))]) ~ -1+
I(v2[-(1:(START-1)), ]/sqrt(P_v[-(1:(START-1))])))
regmod
Z <- cbind(frac_diff(rep(1, length(y)), -d))
if(!corr){
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, nu, ar)$v)
}else{
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, Q, ar, corr)$v)
}
regmod <- lm(v[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))]) ~ -1+
I(v2[-(1:(START-1)), ]/sqrt(P_v[-(1:(START-1))])))
regmod
mu <- summary(regmod)$coefficients[,1]
v  <- c(rep(NA, START-1), residuals(regmod))
v
Z <- cbind(1:n)
Z
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, Q, ar, corr)$v)
Z
d
Q
ar
corr
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, Q, ar, corr)$v)
Q
class(Q)
Z
Z <- cbind(as.numeric(1:n))
v2 <- apply(Z, 2, function(x) fUC_comp(x, d, Q, ar, corr)$v)
v2
regmod <- lm(v[-(1:(START-1))]/sqrt(P_v[-(1:(START-1))]) ~ -1+
I(v2[-(1:(START-1)), ]/sqrt(P_v[-(1:(START-1))])))
mu <- summary(regmod)$coefficients[,1]
v  <- c(rep(NA, START-1), residuals(regmod))
mu
sum(log(P_v[START:n,]))
sum(v[START:n]^2/P_v[START:n,])
library(fUCpack)
fUC_opt
20 + 2*-3946.087
10*log(2083) + 2*(-3946.087)
9*log(2083) + 2*(-3945.99)
10*log(2083) + 2*(-3945.99)
11*log(2083) + 2*(-3946.087)
22 + 2*(-3946.087)
load("~/Dokumente/Projekte/Filtering unknown persistence/R/Applications/temptest/2a_NOAA_SST_none_p5_noseas_diff.RData")
View(RESULTS)
library(fUCpack)
devtools::load_all()
gc()
n <- 100
d <- 1.25
nu <- 3
R <- 1
# Strong persistence
ar <- c(-1.6, 0.8)
# ==============================================================================
# Check: TC_inv:
if(length(ar) < n-1){
b <- c(ar, rep(0, n-length(ar)-1))
}else{
b <- ar
}
# simulate data
x <- frac_diff(rnorm(n), -d)
c <- stats::filter(c(rep(0, length(ar)), rnorm(n)), filter = c(-ar), method = "recursive", sides = 1)[-(1:length(ar))]
y <- x + c
# Generate coefficient matrices
S0t      <- embed0(ma_inf(d[1], n-1) , n)
S0c      <- embed0(c(1, b), n)
# Obtain coefficients for x, c
ma       <- ma_inf(d[1],NROW(y))[-1]
ma_c     <- c(ar, rep(0, n-length(ar)))
Q <- matrix(c(1, 0, 0, nu), 2, 2)
theta <- c(d, mlogvech(Q), ar)
TV_inv_hand <- function(y, d, ar, nu){
n <- length(y)
Sd <- embed0(ma_inf(d[1], n-1) , n)
B  <- embed0(c(1, b), n)
ma  <- ma_inf(d[1],NROW(y))[-1]
ma_c  <- c(ar, rep(0, n-length(ar)))
x_hat <- c_hat <- rep(0, n)
for(t in 1:(n-1)){
x_hat_t <- solve(nu*crossprod(Sd[1:t, 1:t]) + crossprod(B[1:t, 1:t])) %*% crossprod(B[1:t, 1:t]) %*% y[1:t]
c_hat_t <- nu*solve(nu*crossprod(Sd[1:t, 1:t]) + crossprod(B[1:t, 1:t])) %*% crossprod(Sd[1:t, 1:t]) %*% y[1:t]
#c_hat_t <- y[1:t] - x_hat_t
x_hat[t+1] <- -ma[t:1]%*%x_hat_t
c_hat[t+1] <- -ma_c[t:1]%*%c_hat_t
}
res <- cbind(x_hat, c_hat, y - x_hat - c_hat)
colnames(res) <- c("x", "c", "v")
return(res)
}
system.time(TC1 <- TV_inv_hand(y, d, ar, nu))
system.time(TC2 <- TCinv(S0t, S0c, nu, y, n , ma, ma_c)[-(n+1),])
system.time(TC3 <- TCinv_cor(S0t, S0c, sigma_eta = 1,
sigma_eps = 3, cov_etaeps=0, y, n , ma, ma_c)[-(n+1),])
cbind(TC1[,1]-TC2[,1], TC1[,2]-TC2[,2])
# checked: works perfectly well
plot(x, type="l")
lines(TC2[,1], col="2")
# ==============================================================================
# Check: TC_inv_cor:
corr <- 0
Q <- matrix(c(1, corr, corr, nu), 2, 2)
err <- mvtnorm::rmvnorm(n, mean = rep(0, 2), sigma = Q)
if(length(ar) < n-1){
b <- c(ar, rep(0, n-length(ar)-1))
}else{
b <- ar
}
# simulate data
x <- frac_diff(err[,1], -d)
c <- stats::filter(c(rep(0, length(ar)), err[,2]), filter = c(-ar), method = "recursive", sides = 1)[-(1:length(ar))]
y <- x + c
# Generate coefficient matrices
S0t      <- embed0(ma_inf(d[1], n-1) , n)
S0c      <- embed0(c(1, b), n)
# Obtain coefficients for x, c
ma       <- ma_inf(d[1],NROW(y))[-1]
ma_c     <- c(ar, rep(0, n-length(ar)))
TV_inv_hand_cor <- function(y, d, ar, nu){
n <- length(y)
Sd <- embed0(ma_inf(d[1], n-1) , n)
B  <- embed0(c(1, b), n)
ma  <- ma_inf(d[1],NROW(y))[-1]
ma_c  <- c(ar, rep(0, n-length(ar)))
x_hat <- c_hat <- rep(0, n)
for(t in 1:(n-1)){
x_hat_t <- solve(nu*crossprod(Sd[1:t, 1:t]) + crossprod(B[1:t, 1:t]) -
) %*% crossprod(B[1:t, 1:t]) %*% y[1:t]
c_hat_t <- nu*solve(nu*crossprod(Sd[1:t, 1:t]) + crossprod(B[1:t, 1:t])) %*% crossprod(Sd[1:t, 1:t]) %*% y[1:t]
x_hat[t+1] <- -ma[t:1]%*%x_hat_t
c_hat[t+1] <- -ma_c[t:1]%*%c_hat_t
}
res <- cbind(x_hat, c_hat, y - x_hat - c_hat)
colnames(res) <- c("x", "c", "v")
return(res)
}
set.seed(42)
# Generate the data
x <- frac_diff_multi(matrix(rnorm(n*R, mean=0, sd=1), n, R), -d)
u <- matrix(rnorm(n*R, mean=0, sd=sqrt(nu)), n, R)
c <- apply(u, 2, function(x) stats::filter(c(rep(0, length(ar)), x), filter = c(-ar), method = "recursive", sides = 1)[-(1:length(ar))])
y <- x + c
optfn <- function(n, y, x){
# Estimate
tryCatch({
(est <- optim(par=c(1, 0, -0.5, 0.5),
fn = fUC_opt,
y=y, method = "BFGS", nulim = c(1/100, 100),
deterministics = FALSE))
par <- est$par
nu  <- exp(par[2])
ar <- est$par[-(1:2)]
KF <- fUC_comp(y, par[1], nu, ar)
#KF2 <- fUC_comp((1:length(y))^par[1], par[1], nu, ar)
#mu  <- summary(lm(KF$v ~ -1 + KF2$v))$coefficients[1,1]
KS <- fUC_smooth(y, par[1], nu, ar = ar)
Rsq <- summary(lm(x ~ KS$x))$r.squared
# Return results
results <- c(par[1], exp(par[2]), ar, Rsq)
names(results) <- c("d", "nu", "ar_1", "ar_2", "Rsq")
return(results)
}, error = function(e) return(rep(NA, 5))
)
}
R
### fUC part
cl <- makeCluster(6)
clusterExport(cl, c("optfn", "fUC_opt", "y", "fUC_comp", "ma_inf",
"embed0", "fUC_smooth", "x", "frac_diff", "lm", "n"))
clusterEvalQ(cl, library(fUCpack))
library(parallel)
### fUC part
cl <- makeCluster(6)
clusterExport(cl, c("optfn", "fUC_opt", "y", "fUC_comp", "ma_inf",
"embed0", "fUC_smooth", "x", "frac_diff", "lm", "n"))
clusterEvalQ(cl, library(fUCpack))
RESULTS <- parSapply(cl, 1:R, function(j) optfn(n, y[, j], x[, j]))
stopCluster(cl)
RESULTS
### fUC part
optfn(n, y[,1], x[,1])
y
x
(est <- optim(par=c(1, 0, -0.5, 0.5),
fn = fUC_opt,
y=y, method = "BFGS", nulim = c(1/100, 100),
deterministics = FALSE))
par <- est$par
nu  <- exp(par[2])
ar <- est$par[-(1:2)]
KF <- fUC_comp(y, par[1], nu, ar)
KS <- fUC_smooth(y, par[1], nu, ar = ar)
KS <- fUC_smooth(y, par[1], nu, ar = ar, corr=F)
Rsq <- summary(lm(x ~ KS$x))$r.squared
# Return results
results <- c(par[1], exp(par[2]), ar, Rsq)
names(results) <- c("d", "nu", "ar_1", "ar_2", "Rsq")
